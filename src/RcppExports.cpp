// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ccc_cpp
arma::mat ccc_cpp(const arma::mat& X);
RcppExport SEXP _matrixCorr_ccc_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// ccc_with_ci_cpp
List ccc_with_ci_cpp(const arma::mat& X, double conf_level);
RcppExport SEXP _matrixCorr_ccc_with_ci_cpp(SEXP XSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc_with_ci_cpp(X, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// openmp_threads
int openmp_threads();
RcppExport SEXP _matrixCorr_openmp_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(openmp_threads());
    return rcpp_result_gen;
END_RCPP
}
// ustat_dcor
double ustat_dcor(const arma::vec& x, const arma::vec& y);
RcppExport SEXP _matrixCorr_ustat_dcor(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ustat_dcor(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ustat_dcor_matrix_cpp
arma::mat ustat_dcor_matrix_cpp(const arma::mat& X);
RcppExport SEXP _matrixCorr_ustat_dcor_matrix_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ustat_dcor_matrix_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// kendall_tau_auto_cpp
double kendall_tau_auto_cpp(NumericVector x, NumericVector y, double scale);
RcppExport SEXP _matrixCorr_kendall_tau_auto_cpp(SEXP xSEXP, SEXP ySEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_tau_auto_cpp(x, y, scale));
    return rcpp_result_gen;
END_RCPP
}
// kendall_tau_a_cpp
double kendall_tau_a_cpp(Rcpp::NumericVector x, Rcpp::NumericVector y, double scale);
RcppExport SEXP _matrixCorr_kendall_tau_a_cpp(SEXP xSEXP, SEXP ySEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_tau_a_cpp(x, y, scale));
    return rcpp_result_gen;
END_RCPP
}
// kendall_tau_b_cpp
double kendall_tau_b_cpp(Rcpp::NumericVector x, Rcpp::NumericVector y, double scale);
RcppExport SEXP _matrixCorr_kendall_tau_b_cpp(SEXP xSEXP, SEXP ySEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_tau_b_cpp(x, y, scale));
    return rcpp_result_gen;
END_RCPP
}
// kendall_matrix_cpp
NumericMatrix kendall_matrix_cpp(NumericMatrix mat);
RcppExport SEXP _matrixCorr_kendall_matrix_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_matrix_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// partial_correlation_cpp
Rcpp::List partial_correlation_cpp(SEXP X_, const std::string method, const double lambda, const bool return_cov_precision);
RcppExport SEXP _matrixCorr_partial_correlation_cpp(SEXP X_SEXP, SEXP methodSEXP, SEXP lambdaSEXP, SEXP return_cov_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_cov_precision(return_cov_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_correlation_cpp(X_, method, lambda, return_cov_precision));
    return rcpp_result_gen;
END_RCPP
}
// pearson_matrix_cpp
arma::mat pearson_matrix_cpp(SEXP X_);
RcppExport SEXP _matrixCorr_pearson_matrix_cpp(SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_matrix_cpp(X_));
    return rcpp_result_gen;
END_RCPP
}
// sss_cor_cpp
arma::mat sss_cor_cpp(SEXP X_);
RcppExport SEXP _matrixCorr_sss_cor_cpp(SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(sss_cor_cpp(X_));
    return rcpp_result_gen;
END_RCPP
}
// spearman_matrix_cpp
arma::mat spearman_matrix_cpp(SEXP X_);
RcppExport SEXP _matrixCorr_spearman_matrix_cpp(SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_matrix_cpp(X_));
    return rcpp_result_gen;
END_RCPP
}
// validate_corr_input_cpp
Rcpp::NumericMatrix validate_corr_input_cpp(SEXP data, bool check_na);
RcppExport SEXP _matrixCorr_validate_corr_input_cpp(SEXP dataSEXP, SEXP check_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type check_na(check_naSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_corr_input_cpp(data, check_na));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixCorr_ccc_cpp", (DL_FUNC) &_matrixCorr_ccc_cpp, 1},
    {"_matrixCorr_ccc_with_ci_cpp", (DL_FUNC) &_matrixCorr_ccc_with_ci_cpp, 2},
    {"_matrixCorr_openmp_threads", (DL_FUNC) &_matrixCorr_openmp_threads, 0},
    {"_matrixCorr_ustat_dcor", (DL_FUNC) &_matrixCorr_ustat_dcor, 2},
    {"_matrixCorr_ustat_dcor_matrix_cpp", (DL_FUNC) &_matrixCorr_ustat_dcor_matrix_cpp, 1},
    {"_matrixCorr_kendall_tau_auto_cpp", (DL_FUNC) &_matrixCorr_kendall_tau_auto_cpp, 3},
    {"_matrixCorr_kendall_tau_a_cpp", (DL_FUNC) &_matrixCorr_kendall_tau_a_cpp, 3},
    {"_matrixCorr_kendall_tau_b_cpp", (DL_FUNC) &_matrixCorr_kendall_tau_b_cpp, 3},
    {"_matrixCorr_kendall_matrix_cpp", (DL_FUNC) &_matrixCorr_kendall_matrix_cpp, 1},
    {"_matrixCorr_partial_correlation_cpp", (DL_FUNC) &_matrixCorr_partial_correlation_cpp, 4},
    {"_matrixCorr_pearson_matrix_cpp", (DL_FUNC) &_matrixCorr_pearson_matrix_cpp, 1},
    {"_matrixCorr_sss_cor_cpp", (DL_FUNC) &_matrixCorr_sss_cor_cpp, 1},
    {"_matrixCorr_spearman_matrix_cpp", (DL_FUNC) &_matrixCorr_spearman_matrix_cpp, 1},
    {"_matrixCorr_validate_corr_input_cpp", (DL_FUNC) &_matrixCorr_validate_corr_input_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixCorr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
