// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bicor_matrix_cpp
arma::mat bicor_matrix_cpp(const arma::mat& X, const double c_const, const double maxPOutliers, const int pearson_fallback, const int n_threads);
RcppExport SEXP _matrixCorr_bicor_matrix_cpp(SEXP XSEXP, SEXP c_constSEXP, SEXP maxPOutliersSEXP, SEXP pearson_fallbackSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type c_const(c_constSEXP);
    Rcpp::traits::input_parameter< const double >::type maxPOutliers(maxPOutliersSEXP);
    Rcpp::traits::input_parameter< const int >::type pearson_fallback(pearson_fallbackSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bicor_matrix_cpp(X, c_const, maxPOutliers, pearson_fallback, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// bicor_vec_cpp
double bicor_vec_cpp(const arma::vec& x, const arma::vec& y, const double c_const, const double maxPOutliers, const int pearson_fallback);
RcppExport SEXP _matrixCorr_bicor_vec_cpp(SEXP xSEXP, SEXP ySEXP, SEXP c_constSEXP, SEXP maxPOutliersSEXP, SEXP pearson_fallbackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type c_const(c_constSEXP);
    Rcpp::traits::input_parameter< const double >::type maxPOutliers(maxPOutliersSEXP);
    Rcpp::traits::input_parameter< const int >::type pearson_fallback(pearson_fallbackSEXP);
    rcpp_result_gen = Rcpp::wrap(bicor_vec_cpp(x, y, c_const, maxPOutliers, pearson_fallback));
    return rcpp_result_gen;
END_RCPP
}
// bicor_matrix_pairwise_cpp
arma::mat bicor_matrix_pairwise_cpp(const arma::mat& X, const double c_const, const double maxPOutliers, const int pearson_fallback, const int min_n, const int n_threads);
RcppExport SEXP _matrixCorr_bicor_matrix_pairwise_cpp(SEXP XSEXP, SEXP c_constSEXP, SEXP maxPOutliersSEXP, SEXP pearson_fallbackSEXP, SEXP min_nSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type c_const(c_constSEXP);
    Rcpp::traits::input_parameter< const double >::type maxPOutliers(maxPOutliersSEXP);
    Rcpp::traits::input_parameter< const int >::type pearson_fallback(pearson_fallbackSEXP);
    Rcpp::traits::input_parameter< const int >::type min_n(min_nSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bicor_matrix_pairwise_cpp(X, c_const, maxPOutliers, pearson_fallback, min_n, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// bicor_matrix_weighted_cpp
arma::mat bicor_matrix_weighted_cpp(const arma::mat& X, const arma::vec& w, const double c_const, const double maxPOutliers, const int pearson_fallback, const int n_threads);
RcppExport SEXP _matrixCorr_bicor_matrix_weighted_cpp(SEXP XSEXP, SEXP wSEXP, SEXP c_constSEXP, SEXP maxPOutliersSEXP, SEXP pearson_fallbackSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type c_const(c_constSEXP);
    Rcpp::traits::input_parameter< const double >::type maxPOutliers(maxPOutliersSEXP);
    Rcpp::traits::input_parameter< const int >::type pearson_fallback(pearson_fallbackSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bicor_matrix_weighted_cpp(X, w, c_const, maxPOutliers, pearson_fallback, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// bicor_matrix_weighted_pairwise_cpp
arma::mat bicor_matrix_weighted_pairwise_cpp(const arma::mat& X, const arma::vec& w, const double c_const, const double maxPOutliers, const int pearson_fallback, const int min_n, const int n_threads);
RcppExport SEXP _matrixCorr_bicor_matrix_weighted_pairwise_cpp(SEXP XSEXP, SEXP wSEXP, SEXP c_constSEXP, SEXP maxPOutliersSEXP, SEXP pearson_fallbackSEXP, SEXP min_nSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type c_const(c_constSEXP);
    Rcpp::traits::input_parameter< const double >::type maxPOutliers(maxPOutliersSEXP);
    Rcpp::traits::input_parameter< const int >::type pearson_fallback(pearson_fallbackSEXP);
    Rcpp::traits::input_parameter< const int >::type min_n(min_nSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bicor_matrix_weighted_pairwise_cpp(X, w, c_const, maxPOutliers, pearson_fallback, min_n, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// cccUst_rcpp
List cccUst_rcpp(NumericVector y_vec, IntegerVector met_vec, IntegerVector time_vec, int nmet0, int nmet1, int ntime, int ns, NumericMatrix Dmat, double delta, double cl);
RcppExport SEXP _matrixCorr_cccUst_rcpp(SEXP y_vecSEXP, SEXP met_vecSEXP, SEXP time_vecSEXP, SEXP nmet0SEXP, SEXP nmet1SEXP, SEXP ntimeSEXP, SEXP nsSEXP, SEXP DmatSEXP, SEXP deltaSEXP, SEXP clSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_vec(y_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type met_vec(met_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type time_vec(time_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nmet0(nmet0SEXP);
    Rcpp::traits::input_parameter< int >::type nmet1(nmet1SEXP);
    Rcpp::traits::input_parameter< int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type cl(clSEXP);
    rcpp_result_gen = Rcpp::wrap(cccUst_rcpp(y_vec, met_vec, time_vec, nmet0, nmet1, ntime, ns, Dmat, delta, cl));
    return rcpp_result_gen;
END_RCPP
}
// set_omp_threads
void set_omp_threads(const int n);
RcppExport SEXP _matrixCorr_set_omp_threads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    set_omp_threads(n);
    return R_NilValue;
END_RCPP
}
// get_omp_threads
int get_omp_threads();
RcppExport SEXP _matrixCorr_get_omp_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_omp_threads());
    return rcpp_result_gen;
END_RCPP
}
// build_L_Dm_cpp
Rcpp::List build_L_Dm_cpp(Rcpp::CharacterVector colnames_X, Rcpp::Nullable<Rcpp::CharacterVector> rmet_name, Rcpp::Nullable<Rcpp::CharacterVector> rtime_name, Rcpp::CharacterVector method_levels, Rcpp::CharacterVector time_levels, bool has_interaction, Rcpp::Nullable<Rcpp::NumericMatrix> Dmat_global);
RcppExport SEXP _matrixCorr_build_L_Dm_cpp(SEXP colnames_XSEXP, SEXP rmet_nameSEXP, SEXP rtime_nameSEXP, SEXP method_levelsSEXP, SEXP time_levelsSEXP, SEXP has_interactionSEXP, SEXP Dmat_globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type colnames_X(colnames_XSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type rmet_name(rmet_nameSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type rtime_name(rtime_nameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method_levels(method_levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type time_levels(time_levelsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_interaction(has_interactionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type Dmat_global(Dmat_globalSEXP);
    rcpp_result_gen = Rcpp::wrap(build_L_Dm_cpp(colnames_X, rmet_name, rtime_name, method_levels, time_levels, has_interaction, Dmat_global));
    return rcpp_result_gen;
END_RCPP
}
// ccc_vc_cpp
Rcpp::List ccc_vc_cpp(Rcpp::NumericMatrix Xr, Rcpp::NumericVector yr, Rcpp::IntegerVector subject, Rcpp::IntegerVector method, Rcpp::IntegerVector time, int nm, int nt, int max_iter, double tol, double conf_level, Rcpp::Nullable<Rcpp::NumericMatrix> Lr, Rcpp::Nullable<Rcpp::NumericMatrix> auxDr);
RcppExport SEXP _matrixCorr_ccc_vc_cpp(SEXP XrSEXP, SEXP yrSEXP, SEXP subjectSEXP, SEXP methodSEXP, SEXP timeSEXP, SEXP nmSEXP, SEXP ntSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP conf_levelSEXP, SEXP LrSEXP, SEXP auxDrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type nm(nmSEXP);
    Rcpp::traits::input_parameter< int >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type auxDr(auxDrSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc_vc_cpp(Xr, yr, subject, method, time, nm, nt, max_iter, tol, conf_level, Lr, auxDr));
    return rcpp_result_gen;
END_RCPP
}
// ccc_cpp
arma::mat ccc_cpp(const arma::mat& X);
RcppExport SEXP _matrixCorr_ccc_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// ccc_with_ci_cpp
List ccc_with_ci_cpp(const arma::mat& X, double conf_level);
RcppExport SEXP _matrixCorr_ccc_with_ci_cpp(SEXP XSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc_with_ci_cpp(X, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// openmp_threads
int openmp_threads();
RcppExport SEXP _matrixCorr_openmp_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(openmp_threads());
    return rcpp_result_gen;
END_RCPP
}
// ustat_dcor
double ustat_dcor(const arma::vec& x, const arma::vec& y);
RcppExport SEXP _matrixCorr_ustat_dcor(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ustat_dcor(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ustat_dcor_matrix_cpp
arma::mat ustat_dcor_matrix_cpp(const arma::mat& X);
RcppExport SEXP _matrixCorr_ustat_dcor_matrix_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ustat_dcor_matrix_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// kendall_tau_auto_cpp
double kendall_tau_auto_cpp(NumericVector x, NumericVector y, double scale);
RcppExport SEXP _matrixCorr_kendall_tau_auto_cpp(SEXP xSEXP, SEXP ySEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_tau_auto_cpp(x, y, scale));
    return rcpp_result_gen;
END_RCPP
}
// kendall_tau_a_cpp
double kendall_tau_a_cpp(Rcpp::NumericVector x, Rcpp::NumericVector y, double scale);
RcppExport SEXP _matrixCorr_kendall_tau_a_cpp(SEXP xSEXP, SEXP ySEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_tau_a_cpp(x, y, scale));
    return rcpp_result_gen;
END_RCPP
}
// kendall_tau_b_cpp
double kendall_tau_b_cpp(Rcpp::NumericVector x, Rcpp::NumericVector y, double scale);
RcppExport SEXP _matrixCorr_kendall_tau_b_cpp(SEXP xSEXP, SEXP ySEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_tau_b_cpp(x, y, scale));
    return rcpp_result_gen;
END_RCPP
}
// kendall_matrix_cpp
NumericMatrix kendall_matrix_cpp(NumericMatrix mat);
RcppExport SEXP _matrixCorr_kendall_matrix_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(kendall_matrix_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// partial_correlation_cpp
Rcpp::List partial_correlation_cpp(SEXP X_, const std::string method, const double lambda, const bool return_cov_precision);
RcppExport SEXP _matrixCorr_partial_correlation_cpp(SEXP X_SEXP, SEXP methodSEXP, SEXP lambdaSEXP, SEXP return_cov_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_cov_precision(return_cov_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_correlation_cpp(X_, method, lambda, return_cov_precision));
    return rcpp_result_gen;
END_RCPP
}
// pearson_matrix_cpp
arma::mat pearson_matrix_cpp(SEXP X_);
RcppExport SEXP _matrixCorr_pearson_matrix_cpp(SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_matrix_cpp(X_));
    return rcpp_result_gen;
END_RCPP
}
// sss_cor_cpp
arma::mat sss_cor_cpp(SEXP X_);
RcppExport SEXP _matrixCorr_sss_cor_cpp(SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(sss_cor_cpp(X_));
    return rcpp_result_gen;
END_RCPP
}
// spearman_matrix_cpp
arma::mat spearman_matrix_cpp(SEXP X_);
RcppExport SEXP _matrixCorr_spearman_matrix_cpp(SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_matrix_cpp(X_));
    return rcpp_result_gen;
END_RCPP
}
// validate_corr_input_cpp
Rcpp::NumericMatrix validate_corr_input_cpp(SEXP data, bool check_na);
RcppExport SEXP _matrixCorr_validate_corr_input_cpp(SEXP dataSEXP, SEXP check_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type check_na(check_naSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_corr_input_cpp(data, check_na));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixCorr_bicor_matrix_cpp", (DL_FUNC) &_matrixCorr_bicor_matrix_cpp, 5},
    {"_matrixCorr_bicor_vec_cpp", (DL_FUNC) &_matrixCorr_bicor_vec_cpp, 5},
    {"_matrixCorr_bicor_matrix_pairwise_cpp", (DL_FUNC) &_matrixCorr_bicor_matrix_pairwise_cpp, 6},
    {"_matrixCorr_bicor_matrix_weighted_cpp", (DL_FUNC) &_matrixCorr_bicor_matrix_weighted_cpp, 6},
    {"_matrixCorr_bicor_matrix_weighted_pairwise_cpp", (DL_FUNC) &_matrixCorr_bicor_matrix_weighted_pairwise_cpp, 7},
    {"_matrixCorr_cccUst_rcpp", (DL_FUNC) &_matrixCorr_cccUst_rcpp, 10},
    {"_matrixCorr_set_omp_threads", (DL_FUNC) &_matrixCorr_set_omp_threads, 1},
    {"_matrixCorr_get_omp_threads", (DL_FUNC) &_matrixCorr_get_omp_threads, 0},
    {"_matrixCorr_build_L_Dm_cpp", (DL_FUNC) &_matrixCorr_build_L_Dm_cpp, 7},
    {"_matrixCorr_ccc_vc_cpp", (DL_FUNC) &_matrixCorr_ccc_vc_cpp, 12},
    {"_matrixCorr_ccc_cpp", (DL_FUNC) &_matrixCorr_ccc_cpp, 1},
    {"_matrixCorr_ccc_with_ci_cpp", (DL_FUNC) &_matrixCorr_ccc_with_ci_cpp, 2},
    {"_matrixCorr_openmp_threads", (DL_FUNC) &_matrixCorr_openmp_threads, 0},
    {"_matrixCorr_ustat_dcor", (DL_FUNC) &_matrixCorr_ustat_dcor, 2},
    {"_matrixCorr_ustat_dcor_matrix_cpp", (DL_FUNC) &_matrixCorr_ustat_dcor_matrix_cpp, 1},
    {"_matrixCorr_kendall_tau_auto_cpp", (DL_FUNC) &_matrixCorr_kendall_tau_auto_cpp, 3},
    {"_matrixCorr_kendall_tau_a_cpp", (DL_FUNC) &_matrixCorr_kendall_tau_a_cpp, 3},
    {"_matrixCorr_kendall_tau_b_cpp", (DL_FUNC) &_matrixCorr_kendall_tau_b_cpp, 3},
    {"_matrixCorr_kendall_matrix_cpp", (DL_FUNC) &_matrixCorr_kendall_matrix_cpp, 1},
    {"_matrixCorr_partial_correlation_cpp", (DL_FUNC) &_matrixCorr_partial_correlation_cpp, 4},
    {"_matrixCorr_pearson_matrix_cpp", (DL_FUNC) &_matrixCorr_pearson_matrix_cpp, 1},
    {"_matrixCorr_sss_cor_cpp", (DL_FUNC) &_matrixCorr_sss_cor_cpp, 1},
    {"_matrixCorr_spearman_matrix_cpp", (DL_FUNC) &_matrixCorr_spearman_matrix_cpp, 1},
    {"_matrixCorr_validate_corr_input_cpp", (DL_FUNC) &_matrixCorr_validate_corr_input_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixCorr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
